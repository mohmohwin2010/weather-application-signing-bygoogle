{"ast":null,"code":"var _jsxFileName = \"/Users/mohmohwin/SelfStudy/AssignmentTest/AstuGlobalTech/weather-application-signing-bygoogle/src/component/search/search.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = _ref => {\n  _s();\n\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState(null); //original start\n  // const loadOptions = (inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     .then((response) => {\n  //       return {\n  //         options: response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         }),\n  //       };\n  //     })\n  //     .catch((err) => console.error(err));\n  // };\n  //original end\n  //update with axios start\n  // const response = await fetch(`/awesome-api-url/?search=${search}&offset=${loadedOptions.length}`);\n  // const responseJSON = await response.json();\n  // return {\n  //   options: responseJSON.results,\n  //   hasMore: responseJSON.has_more,\n  // };\n\n  const loadOptions = async inputValue => {\n    const response = await fetch(`${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`, geoApiOptions);\n    const responseJSON = await response.json(); // console.log(\"json object : \", responseJSON.data);\n    //   return {\n    //   options: responseJSON.results,\n    // };\n\n    return {\n      options: responseJSON.data.map(city => {\n        return {\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`\n        };\n      })\n    };\n  }; //update end\n  // const loadOptions = (inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     .then((response) => {\n  //       return {\n  //         options: response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         }),\n  //       };\n  //     })\n  //     .catch((err) => console.error(err));\n  // };\n  // let loadOptions = useCallback((inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     // .then((response) => console.log(response))\n  //     .then((response) => {\n  //       // setOptionData(\n  //       //   response.data.map((city) => {\n  //       //     return {\n  //       //       value: `${city.latitude} ${city.longitude}`,\n  //       //       label: `${city.name}, ${city.countryCode}`,\n  //       //     };\n  //       //   })\n  //       // );\n  //       // onSearchChange(\n  //       //   response.data.map((city) => {\n  //       //     return {\n  //       //       value: `${city.latitude} ${city.longitude}`,\n  //       //       label: `${city.name}, ${city.countryCode}`,\n  //       //     };\n  //       //   })\n  //       // );\n  //       // onSearchChange(response);\n  //       onSearchChange(\n  //         response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         })\n  //       );\n  //     })\n  //     .catch((err) => console.error(err));\n  // });\n  // let yesMom = useCallback(() => props.update(\"yes mom\"));\n\n\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for City\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n\n_c = Search;\nexport default Search; // import { useState } from \"react\";\n// import { AsyncPaginate } from \"react-select-async-paginate\";\n// const Search = ({ onSearchChange }) => {\n//   const [search, setSearch] = useState(null);\n//   const handleOnChange = (searchData) => {\n//     setSearch(searchData);\n//     onSearchChange(searchData);\n//   };\n//   return (\n//     <AsyncPaginate\n//       placeholder=\"Search for City\"\n//       debounceTimeout={600}\n//       value={search}\n//       onChange={handleOnChange}\n//     />\n//   );\n// };\n// export default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useCallback","useState","AsyncPaginate","GEO_API_URL","geoApiOptions","Search","onSearchChange","search","setSearch","loadOptions","inputValue","response","fetch","responseJSON","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","handleOnChange","searchData"],"sources":["/Users/mohmohwin/SelfStudy/AssignmentTest/AstuGlobalTech/weather-application-signing-bygoogle/src/component/search/search.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../api\";\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  //original start\n  // const loadOptions = (inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     .then((response) => {\n  //       return {\n  //         options: response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         }),\n  //       };\n  //     })\n  //     .catch((err) => console.error(err));\n  // };\n  //original end\n\n  //update with axios start\n  // const response = await fetch(`/awesome-api-url/?search=${search}&offset=${loadedOptions.length}`);\n  // const responseJSON = await response.json();\n\n  // return {\n  //   options: responseJSON.results,\n  //   hasMore: responseJSON.has_more,\n  // };\n  const loadOptions = async (inputValue) => {\n    const response = await fetch(\n      `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n      geoApiOptions\n    );\n    const responseJSON = await response.json();\n    // console.log(\"json object : \", responseJSON.data);\n    //   return {\n    //   options: responseJSON.results,\n    // };\n    return {\n      options: responseJSON.data.map((city) => {\n        return {\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.countryCode}`,\n        };\n      }),\n    };\n  };\n  //update end\n\n  // const loadOptions = (inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     .then((response) => {\n  //       return {\n  //         options: response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         }),\n  //       };\n  //     })\n  //     .catch((err) => console.error(err));\n  // };\n\n  // let loadOptions = useCallback((inputValue) => {\n  //   fetch(\n  //     // `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     `${GEO_API_URL}/cities?minPopulation=100&namePrefix=${inputValue}`,\n  //     geoApiOptions\n  //   )\n  //     .then((response) => response.json())\n  //     // .then((response) => console.log(response))\n  //     .then((response) => {\n  //       // setOptionData(\n  //       //   response.data.map((city) => {\n  //       //     return {\n  //       //       value: `${city.latitude} ${city.longitude}`,\n  //       //       label: `${city.name}, ${city.countryCode}`,\n  //       //     };\n  //       //   })\n  //       // );\n\n  //       // onSearchChange(\n  //       //   response.data.map((city) => {\n  //       //     return {\n  //       //       value: `${city.latitude} ${city.longitude}`,\n  //       //       label: `${city.name}, ${city.countryCode}`,\n  //       //     };\n  //       //   })\n  //       // );\n  //       // onSearchChange(response);\n  //       onSearchChange(\n  //         response.data.map((city) => {\n  //           return {\n  //             value: `${city.latitude} ${city.longitude}`,\n  //             label: `${city.name}, ${city.countryCode}`,\n  //           };\n  //         })\n  //       );\n  //     })\n  //     .catch((err) => console.error(err));\n  // });\n  // let yesMom = useCallback(() => props.update(\"yes mom\"));\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for City\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n\n// import { useState } from \"react\";\n// import { AsyncPaginate } from \"react-select-async-paginate\";\n\n// const Search = ({ onSearchChange }) => {\n//   const [search, setSearch] = useState(null);\n\n//   const handleOnChange = (searchData) => {\n//     setSearch(searchData);\n//     onSearchChange(searchData);\n//   };\n\n//   return (\n//     <AsyncPaginate\n//       placeholder=\"Search for City\"\n//       debounceTimeout={600}\n//       value={search}\n//       onChange={handleOnChange}\n//     />\n//   );\n// };\n// export default Search;\n"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,QAA3C;;;AACA,MAAMC,MAAM,GAAG,QAAwB;EAAA;;EAAA,IAAvB;IAAEC;EAAF,CAAuB;EACrC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC,CADqC,CAGrC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;;EACA,MAAMQ,WAAW,GAAG,MAAOC,UAAP,IAAsB;IACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAET,WAAY,wCAAuCO,UAAW,EADvC,EAE1BN,aAF0B,CAA5B;IAIA,MAAMS,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B,CALwC,CAMxC;IACA;IACA;IACA;;IACA,OAAO;MACLC,OAAO,EAAEF,YAAY,CAACG,IAAb,CAAkBC,GAAlB,CAAuBC,IAAD,IAAU;QACvC,OAAO;UACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EADrC;UAELC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;QAFpC,CAAP;MAID,CALQ;IADJ,CAAP;EAQD,CAlBD,CAjCqC,CAoDrC;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;IACrClB,SAAS,CAACkB,UAAD,CAAT;IACApB,cAAc,CAACoB,UAAD,CAAd;EACD,CAHD;;EAKA,oBACE,QAAC,aAAD;IACE,WAAW,EAAC,iBADd;IAEE,eAAe,EAAE,GAFnB;IAGE,KAAK,EAAEnB,MAHT;IAIE,QAAQ,EAAEkB,cAJZ;IAKE,WAAW,EAAEhB;EALf;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAhID;;GAAMJ,M;;KAAAA,M;AAkIN,eAAeA,MAAf,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}